# Generated by Django 4.0 on 2022-04-19 16:31

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'category',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KeywordHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('keyword', models.CharField(max_length=50)),
                ('count', models.PositiveIntegerField(max_length=10)),
            ],
            options={
                'db_table': 'keyword_history',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=100)),
                ('overview', models.CharField(default=None, max_length=300, null=True)),
                ('watched_count', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000)])),
                ('answer_count', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000)])),
                ('scope', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('start_at', models.DateField(default=django.utils.timezone.localdate, null=True)),
                ('end_at', models.DateField(default=None, null=True)),
            ],
            options={
                'db_table': 'questionnaire',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RespondentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('respondent_id', models.CharField(max_length=256)),
                ('ip_address', models.CharField(max_length=15)),
                ('questionnaire', models.ForeignKey(max_length=10, on_delete=django.db.models.deletion.CASCADE, to='questionnaire.questionnaire')),
            ],
            options={
                'db_table': 'respondent_history',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('index', models.PositiveIntegerField(max_length=2)),
                ('question_type', models.PositiveIntegerField(max_length=2)),
                ('questionnaire', models.ForeignKey(max_length=10, on_delete=django.db.models.deletion.CASCADE, to='questionnaire.questionnaire')),
            ],
            options={
                'db_table': 'questionnaire_meta',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireManage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('management_id', models.CharField(max_length=256)),
                ('key_phrase', models.CharField(max_length=20)),
                ('questionnaire', models.ForeignKey(max_length=10, on_delete=django.db.models.deletion.CASCADE, to='questionnaire.questionnaire')),
            ],
            options={
                'db_table': 'questionnaire_manage',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionFreeText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('index', models.PositiveIntegerField(max_length=2)),
                ('question', models.CharField(max_length=500)),
                ('questionnaire', models.ForeignKey(max_length=10, on_delete=django.db.models.deletion.CASCADE, to='questionnaire.questionnaire')),
            ],
            options={
                'db_table': 'question_free_text',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CategoryMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('category', models.ForeignKey(max_length=10, on_delete=django.db.models.deletion.CASCADE, to='questionnaire.category')),
                ('questionnaire', models.ForeignKey(max_length=10, on_delete=django.db.models.deletion.CASCADE, to='questionnaire.questionnaire')),
            ],
            options={
                'db_table': 'category_mapping',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CategoryHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('count', models.PositiveIntegerField(max_length=10)),
                ('category', models.OneToOneField(max_length=10, on_delete=django.db.models.deletion.CASCADE, to='questionnaire.category')),
            ],
            options={
                'db_table': 'category_history',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnswerFreeText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('deleted_at', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('answer', models.CharField(max_length=500)),
                ('question', models.ForeignKey(max_length=10, on_delete=django.db.models.deletion.CASCADE, to='questionnaire.questionfreetext')),
            ],
            options={
                'db_table': 'answer_free_text',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CategoryMappingProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('questionnaire.categorymapping',),
        ),
        migrations.CreateModel(
            name='CategoryProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('questionnaire.category',),
        ),
        migrations.CreateModel(
            name='KeywordHistoryProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('questionnaire.keywordhistory',),
        ),
        migrations.CreateModel(
            name='QuestionnaireMetaProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('questionnaire.questionnairemeta',),
        ),
        migrations.CreateModel(
            name='QuestionnaireProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('questionnaire.questionnaire',),
        ),
        migrations.AddConstraint(
            model_name='questionnairemeta',
            constraint=models.UniqueConstraint(fields=('questionnaire_id', 'index'), name='question_unique'),
        ),
        migrations.AddConstraint(
            model_name='questionfreetext',
            constraint=models.UniqueConstraint(fields=('questionnaire_id', 'index'), name='question_text_unique'),
        ),
        migrations.AddConstraint(
            model_name='categorymapping',
            constraint=models.UniqueConstraint(fields=('questionnaire_id', 'category_id'), name='mapping_unique'),
        ),
    ]
